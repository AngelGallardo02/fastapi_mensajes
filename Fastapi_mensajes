from typing import Optional
from pydantic import BaseModel 
from fastapi import FastAPI, HTTPException

class Mensaje(BaseModel):
    id : Optional[int] = None
    user : str
    mensaje : str


app = FastAPI()

# Base de datos simulada
 
mensaje_db = []

@app.post("/mensajes/", response_model= Mensaje)

def crear_mensaje(mensaje:Mensaje):
    mensaje.id = len(mensaje_db) + 1
    mensaje_db.append(mensaje)
    return mensaje





@app.get("/mensajes/{mensaje_id}", response_model = Mensaje)
def obtener_mensaje(mensaje_id:int):
    for mensaje in mensaje_db:
        if mensaje.id == mensaje_id:
            return mensaje
    raise HTTPException(status_code=404, detail="Mensaje no encontrado")

@app.get("/mensajes/", response_model= list[Mensaje])
def listar_mensaje():
    return mensaje_db





@app.put("/mensajes/{mensaje_id}", response_model = Mensaje)
def actualizar_mensaje(mensaje_id : int , mensaje_actualizado : Mensaje):
    for index,mensaje in enumerate(mensaje_db):
        if mensaje.id == mensaje_id:
            mensaje_db[index] = mensaje_actualizado
            mensaje_actualizado.id = mensaje_id
            return mensaje_actualizado
    raise HTTPException(status_code=404, detail="Mensaje no actualizado")




@app.delete("/mensajes/{mensaje_id}", response_model = dict)
def eliminar_mensaje(mensaje_id:int):
    for index,mensaje in enumerate(mensaje_db):
        if mensaje.id == mensaje_id:
            del mensaje_db[index]
            return{"detail":"Mensaje eliminado"}
    raise HTTPException(status_code=404, detail="Mensaje no encontrado")
